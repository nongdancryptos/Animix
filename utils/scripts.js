import { HttpsProxyAgent } from "https-proxy-agent";
import fetch from "node-fetch";
import log from "./logger.js";

// API URL
const apiUrl = "https://pro-api.animix.tech";

// Y√™u c·∫ßu v·ªõi s·ªë l·∫ßn th·ª≠ l·∫°i s·ª≠ d·ª•ng proxy
async function requestWithRetry(endpoint, options, retries = 3, proxy = null) {
    const url = `${apiUrl}${endpoint}`;
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 20000);

    const requestOptions = {
        ...options,
        signal: controller.signal,
    };

    if (proxy) {
        requestOptions.agent = new HttpsProxyAgent(proxy);
    }

    try {
        const response = await fetch(url, requestOptions);
        clearTimeout(timeoutId);

        if (!response.ok) throw new Error(`L·ªói HTTP! m√£ tr·∫°ng th√°i: ${response.status}`);
        return await response.json();
    } catch (error) {
        clearTimeout(timeoutId);
        if (retries > 0) {
            log.warn(`Th·ª≠ l·∫°i y√™u c·∫ßu t·ªõi ${url}. S·ªë l·∫ßn th·ª≠ c√≤n l·∫°i: ${retries}`);
            return await requestWithRetry(endpoint, options, retries - 1, proxy);
        }
        log.error(`Y√™u c·∫ßu t·ªõi ${url} ƒë√£ th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠:`, error);
        return null;
    }
};

// L·∫•y danh s√°ch nhi·ªám v·ª•
export async function fetchMissionList(headers, proxy) {
    const data = await requestWithRetry("/public/mission/list", { method: "GET", headers }, 3, proxy);
    return data?.result || [];
}

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
export async function fetchUserInfo(headers, proxy) {
    const data = await requestWithRetry("/public/user/info", { method: "GET", headers }, 3, proxy);
    return data || {};
}

// L·∫•y t·∫•t c·∫£ c√°c th√†nh t·ª±u
export async function fetchAllAchievements(headers, proxy) {
    const data = await requestWithRetry("/public/achievement/list", { method: "GET", headers }, 3, proxy);
    const allAchievements = Object.values(data?.result || {})
        .flatMap(quest => quest.achievements)
        .filter(quest => quest.status === true && quest.claimed === false)
        .map(quest => quest.quest_id);
    return allAchievements;
}

// L·∫•y danh s√°ch th√∫
export async function fetchPetList(headers, proxy) {
    const data = await requestWithRetry("/public/pet/list", { method: "GET", headers }, 3, proxy);
    const petIdsByStarAndClass = {};
    const allPetIds = [];

    for (const pet of data.result || []) {
        if (!petIdsByStarAndClass[pet.star]) petIdsByStarAndClass[pet.star] = {};
        if (!petIdsByStarAndClass[pet.star][pet.class]) petIdsByStarAndClass[pet.star][pet.class] = [];

        const petAmount = parseInt(pet.amount, 10);

        for (let i = 0; i < petAmount; i++) {
            petIdsByStarAndClass[pet.star][pet.class].push(pet.pet_id);
            allPetIds.push(pet.pet_id);
        }
    }

    return { petIdsByStarAndClass, allPetIds };
}

// L·∫•y danh s√°ch DNA th√∫
export async function fetchPetDnaList(headers, proxy) {
    const data = await requestWithRetry("/public/pet/dna/list", { method: "GET", headers }, 3, proxy);
    const momPetIds = [];
    const dadPetIds = [];
    const allPetIds = [];

    for (const pet of data.result || []) {
        const petAmount = parseInt(pet.amount, 10);
        for (let i = 0; i < petAmount; i++) {
            allPetIds.push(pet.item_id);
            if (pet.can_mom) {
                momPetIds.push(pet.item_id);
            } else {
                dadPetIds.push(pet.item_id);
            }
        }
    }

    return { momPetIds, dadPetIds, allPetIds };
}

// L·∫•y danh s√°ch nhi·ªám v·ª• h√†ng ng√†y
export async function fetchQuestList(headers, proxy) {
    const data = await requestWithRetry("/public/quest/list", { method: "GET", headers }, 3, proxy);
    return data?.result?.quests
        .filter(quest => quest.status === false)
        .map(quest => quest.quest_code) || [];
}

// L·∫•y danh s√°ch Season Pass
export async function fetchSeasonPass(headers, proxy) {
    const data = await requestWithRetry("/public/season-pass/list", { method: "GET", headers }, 3, proxy);
    return data?.result || [];
}

// Nh·∫≠n Season Pass
export async function claimSeasonPass(headers, proxy, seasonId, type, step) {
    const payload = { season_id: seasonId, type, step };
    const data = await requestWithRetry("/public/season-pass/claim", {
        method: "POST",
        headers,
        body: JSON.stringify(payload),
    }, 3, proxy);
    if (data?.result) {
        log.info("ƒê√£ nh·∫≠n Season Pass th√†nh c√¥ng:", data.result);
    }
}

// Nh·∫≠n nhi·ªám v·ª•
export async function claimMission(headers, proxy, missionId) {
    const payload = { mission_id: missionId };
    const data = await requestWithRetry("/public/mission/claim", {
        method: "POST",
        headers,
        body: JSON.stringify(payload),
    }, 3, proxy);
    if (data?.result) {
        log.info("ƒê√£ nh·∫≠n nhi·ªám v·ª• th√†nh c√¥ng:", data.result);
    }
}

// Pha tr·ªôn th√∫
export async function indehoy(headers, proxy, mom, dad) {
    const payload = { dad_id: dad, mom_id: mom };
    const data = await requestWithRetry("/public/pet/mix", {
        method: "POST",
        headers,
        body: JSON.stringify(payload),
    }, 3, proxy);
    const pet = data?.result?.pet || { name: "Kh√¥ng r√µ", star: 0, class: "Kh√¥ng r√µ" };
    const petInfo = { name: pet.name, star: pet.star, class: pet.class };
    log.info(`ƒê√£ pha tr·ªôn th√∫ th√†nh c√¥ng!üòò Sinh ra:`, JSON.stringify(petInfo));
}

// Tham gia nhi·ªám v·ª•
export async function joinMission(headers, proxy, payloadMission) {
    const data = await requestWithRetry("/public/mission/enter", {
        method: "POST",
        headers,
        body: JSON.stringify(payloadMission),
    }, 3, proxy);
    if (data?.result?.createdAt) {
        log.info("ƒê√£ tham gia nhi·ªám v·ª• th√†nh c√¥ng l√∫c:", data.result.createdAt);
    }
}

// Tham gia clan
export async function joinClan(headers, proxy) {
    const data = await requestWithRetry("/public/clan/join", {
        method: "POST",
        headers,
        body: JSON.stringify({ clan_id: 97 }),
    }, 3, proxy);
    if (data?.result) {
        log.info("ƒê√£ tham gia clan th√†nh c√¥ng:", data.result);
    }
}

// Ki·ªÉm tra nhi·ªám v·ª•
export async function checkIn(headers, proxy, questCode) {
    const data = await requestWithRetry("/public/quest/check", {
        method: "POST",
        headers,
        body: JSON.stringify({ quest_code: questCode }),
    }, 3, proxy);
    if (data?.result?.status) {
        log.info(`ƒê√£ nh·∫≠n nhi·ªám v·ª• ${questCode} th√†nh c√¥ng:`, data.result.status);
    }
}

// Nh·∫≠n th√†nh t·ª±u
export async function claimAchievement(headers, proxy, questId) {
    const data = await requestWithRetry("/public/achievement/claim", {
        method: "POST",
        headers,
        body: JSON.stringify({ quest_id: questId }),
    }, 3, proxy);
    if (data?.result?.status) {
        log.info(`ƒê√£ nh·∫≠n th√†nh t·ª±u ${questId} th√†nh c√¥ng:`, data.result.status);
    }
}

// Nh·∫≠n th√∫ m·ªõi
export async function getNewPet(headers, proxy) {
    const data = await requestWithRetry("/public/pet/dna/gacha", {
        method: "POST",
        headers,
        body: JSON.stringify({ amount: 1 }),
    }, 3, proxy);
    const pet = data?.result?.dna[0] || { name: "Kh√¥ng r√µ", star: 0, class: "Kh√¥ng r√µ" };
    const petInfo = { name: pet.name, star: pet.star, class: pet.class };
    const godPower = data?.result?.god_power || 0;
    log.info("Nh·∫≠n th√∫ m·ªõi th√†nh c√¥ng!", JSON.stringify(petInfo));
    return godPower;
}
